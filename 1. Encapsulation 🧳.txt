1. Encapsulation 🧳

Definition:
Encapsulation means bundling data (properties) and methods (functions) together while restricting direct access to some internal parts of an object.

PHP Example:

<?php
class BankAccount {
    private $balance; // private property

    public function __construct($initialBalance) {
        $this->balance = $initialBalance;
    }

    public function deposit($amount) {
        $this->balance += $amount;
        return $this->balance;
    }

    public function getBalance() {
        return $this->balance;
    }
}

$account = new BankAccount(1000);
$account->deposit(500);
echo $account->getBalance(); // 1500
// echo $account->balance; ❌ Error: Cannot access private property
?>


The balance property is hidden from direct access—only accessible through methods.

2. Abstraction 🎭

Definition:
Abstraction focuses on showing only the essential features of an object while hiding internal details.

PHP Example:

<?php
abstract class CoffeeMachine {
    abstract protected function grindBeans();
    abstract protected function heatWater();

    public function start() {
        $this->grindBeans();
        $this->heatWater();
        echo "Coffee is ready! ☕\n";
    }
}

class MyCoffeeMachine extends CoffeeMachine {
    protected function grindBeans() {
        echo "Grinding beans...\n";
    }

    protected function heatWater() {
        echo "Heating water...\n";
    }
}

$machine = new MyCoffeeMachine();
$machine->start();
// $machine->grindBeans(); ❌ Error, method is protected
?>


The user interacts with start()—internal steps are hidden.

3. Inheritance 🧬

Definition:
Inheritance allows a class to acquire properties and methods from another class, making code reusable.

PHP Example:

<?php
class Animal {
    public $name;

    public function __construct($name) {
        $this->name = $name;
    }

    public function makeSound() {
        echo "$this->name makes a sound.\n";
    }
}

class Dog extends Animal {
    public function makeSound() {
        echo "$this->name barks.\n";
    }
}

$dog = new Dog("Buddy");
$dog->makeSound(); // Buddy barks.
?>


Dog inherits from Animal but can override its behavior.

4. Polymorphism 🎨

Definition:
Polymorphism means “many forms.” It allows objects of different classes to be treated through the same interface while behaving differently.

PHP Example:

<?php
abstract class Shape {
    abstract public function area();
}

class Circle extends Shape {
    private $radius;

    public function __construct($radius) {
        $this->radius = $radius;
    }

    public function area() {
        return pi() * pow($this->radius, 2);
    }
}

class Rectangle extends Shape {
    private $width;
    private $height;

    public function __construct($width, $height) {
        $this->width = $width;
        $this->height = $height;
    }

    public function area() {
        return $this->width * $this->height;
    }
}

$shapes = [new Circle(5), new Rectangle(4, 6)];

foreach ($shapes as $shape) {
    echo $shape->area() . "\n";
}
?>


Both Circle and Rectangle implement area(), but the output depends on the object type.

✅ Summary:

Encapsulation: Hide data inside the object.

Abstraction: Hide complex details, expose only essential behavior.

Inheritance: Reuse and extend existing classes.

Polymorphism: Same interface, different behavior.